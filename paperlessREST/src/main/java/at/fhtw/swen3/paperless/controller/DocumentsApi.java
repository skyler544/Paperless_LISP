/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.2.0-SNAPSHOT). https://openapi-generator.tech Do not edit the class manually.
 */
package at.fhtw.swen3.paperless.controller;

import at.fhtw.swen3.paperless.services.customDTOs.GetDocumentWrapperDTO;
import at.fhtw.swen3.paperless.services.dto.*;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

import jakarta.annotation.Generated;
import jakarta.validation.Valid;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.time.OffsetDateTime;
import java.util.List;

@Generated(
        value = "org.openapitools.codegen.languages.SpringCodegen",
        date = "2023-11-15T14:45:09.395474Z[Etc/UTC]")
@Validated
@Controller
@Tag(name = "Documents", description = "the Documents API")
public interface DocumentsApi {

    /**
     * DELETE /api/documents/{id}/
     *
     * @param id (required)
     * @return Success (status code 204)
     */
    @Operation(
            operationId = "deleteDocument",
            tags = {"Documents"},
            responses = {@ApiResponse(responseCode = "204", description = "Success")})
    @RequestMapping(method = RequestMethod.DELETE, value = "/api/documents/{id}/")
    default ResponseEntity<Void> deleteDocument(
            @Parameter(name = "id", required = true, in = ParameterIn.PATH) @PathVariable("id")
                    Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /api/documents/{id}/
     *
     * @param id (required)
     * @param page (optional)
     * @param fullPerms (optional)
     * @return Success (status code 200)
     */
    @Operation(
            operationId = "getDocument",
            tags = {"Documents"},
            responses = {
                @ApiResponse(
                        responseCode = "200",
                        description = "Success",
                        content = {
                            @Content(
                                    mediaType = "application/json",
                                    schema = @Schema(implementation = GetDocument200Response.class))
                        })
            })
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/documents/{id}/",
            produces = {"application/json"})
    default ResponseEntity<GetDocument200Response> getDocument(
            @Parameter(name = "id", required = true, in = ParameterIn.PATH) @PathVariable("id")
                    Integer id,
            @Parameter(name = "page", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "page", required = false)
                    Integer page,
            @Parameter(name = "full_perms", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "full_perms", required = false)
                    Boolean fullPerms) {
        return new ResponseEntity<>(new GetDocument200Response(), HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /api/documents/{id}/metadata/
     *
     * @param id (required)
     * @return Success (status code 200)
     */
    @Operation(
            operationId = "getDocumentMetadata",
            tags = {"Documents"},
            responses = {
                @ApiResponse(
                        responseCode = "200",
                        description = "Success",
                        content = {
                            @Content(
                                    mediaType = "application/json",
                                    schema =
                                            @Schema(
                                                    implementation =
                                                            GetDocumentMetadata200Response.class))
                        })
            })
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/documents/{id}/metadata/",
            produces = {"application/json"})
    default ResponseEntity<GetDocumentMetadata200Response> getDocumentMetadata(
            @Parameter(name = "id", required = true, in = ParameterIn.PATH) @PathVariable("id")
                    Integer id) {
        return new ResponseEntity<>(
                new GetDocumentMetadata200Response(), HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * GET /api/documents/
     *
     * @param page (optional)
     * @param pageSize (optional)
     * @param query (optional)
     * @param ordering (optional)
     * @param tagsIdAll (optional)
     * @param documentTypeId (optional)
     * @param storagePathIdIn (optional)
     * @param correspondentId (optional)
     * @param truncateContent (optional)
     * @return Success (status code 200)
     */
    @Operation(
            operationId = "getDocuments",
            tags = {"Documents"},
            responses = {
                @ApiResponse(
                        responseCode = "200",
                        description = "Success",
                        content = {
                            @Content(
                                    mediaType = "application/json",
                                    schema =
                                            @Schema(implementation = GetDocuments200Response.class))
                        })
            })
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/documents/",
            produces = {"application/json"})
    default ResponseEntity<GetDocumentWrapperDTO> getDocuments(
            @Parameter(name = "Page", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "Page", required = false)
                    Integer page,
            @Parameter(name = "page_size", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "page_size", required = false)
                    Integer pageSize,
            @Parameter(name = "query", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "query", required = false)
                    String query,
            @Parameter(name = "ordering", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "ordering", required = false)
                    String ordering,
            @Parameter(name = "tags__id__all", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "tags__id__all", required = false)
                    List<Integer> tagsIdAll,
            @Parameter(name = "document_type__id", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "document_type__id", required = false)
                    Integer documentTypeId,
            @Parameter(name = "storage_path__id__in", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "storage_path__id__in", required = false)
                    Integer storagePathIdIn,
            @Parameter(name = "correspondent__id", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "correspondent__id", required = false)
                    Integer correspondentId,
            @Parameter(name = "truncate_content", in = ParameterIn.QUERY)
                    @Valid
                    @RequestParam(value = "truncate_content", required = false)
                    Boolean truncateContent) {
        return new ResponseEntity<>(new GetDocumentWrapperDTO(), HttpStatus.OK);
    }

    /**
     * PUT /api/documents/{id}/
     *
     * @param id (required)
     * @param updateDocumentRequest (optional)
     * @return Success (status code 200)
     */
    @Operation(
            operationId = "updateDocument",
            tags = {"Documents"},
            responses = {
                @ApiResponse(
                        responseCode = "200",
                        description = "Success",
                        content = {
                            @Content(
                                    mediaType = "application/json",
                                    schema =
                                            @Schema(
                                                    implementation =
                                                            UpdateDocument200Response.class))
                        })
            })
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/api/documents/{id}/",
            produces = {"application/json"},
            consumes = {"application/json"})
    default ResponseEntity<UpdateDocument200Response> updateDocument(
            @Parameter(name = "id", required = true, in = ParameterIn.PATH) @PathVariable("id")
                    Integer id,
            @Parameter(name = "UpdateDocumentRequest") @Valid @RequestBody(required = false)
                    UpdateDocumentRequest updateDocumentRequest) {
        return new ResponseEntity<>(new UpdateDocument200Response(), HttpStatus.NOT_IMPLEMENTED);
    }

    /**
     * POST /api/documents/post_document/
     *
     * @param title (optional)
     * @param created (optional)
     * @param documentType (optional)
     * @param tags (optional)
     * @param correspondent (optional)
     * @param document (optional)
     * @return Success (status code 200)
     */
    @Operation(
            operationId = "uploadDocument",
            tags = {"Documents"},
            responses = {@ApiResponse(responseCode = "200", description = "Success")})
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/documents/post_document/",
            consumes = {"multipart/form-data"})
    default ResponseEntity<Void> uploadDocument(
            @Parameter(name = "title") @Valid @RequestParam(value = "title", required = false)
                    String title,
            @Parameter(name = "created")
                    @Valid
                    @RequestParam(value = "created", required = false)
                    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
                    OffsetDateTime created,
            @Parameter(name = "document_type")
                    @Valid
                    @RequestParam(value = "document_type", required = false)
                    Integer documentType,
            @Parameter(name = "tags") @Valid @RequestPart(value = "tags", required = false)
                    List<Integer> tags,
            @Parameter(name = "correspondent")
                    @Valid
                    @RequestParam(value = "correspondent", required = false)
                    Integer correspondent,
            @Parameter(name = "document") @RequestPart(value = "document", required = false)
                    List<MultipartFile> document) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}
